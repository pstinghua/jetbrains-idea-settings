<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>variables</entry>
      </history-search>
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="/opt/playground/holidayrequest/src/main/kotlin/org/flowable/main.kt" timestamp="1586747504732">
        <mark key="'" line="41" column="34" />
        <mark key="[" line="66" column="5" />
        <mark key="]" line="67" column="43" />
        <mark key="." line="67" column="42" />
        <mark key="^" line="67" column="43" />
      </file>
      <file name="/opt/playground/kotlin-demo/src/main/kotlin/main.kt" timestamp="1589358504511">
        <mark key="[" line="24" column="18" />
        <mark key="]" line="24" column="29" />
        <mark key="^" line="24" column="29" />
        <mark key="." line="24" column="28" />
      </file>
    </filemarks>
    <jumps>
      <jump line="12" column="4" filename="/opt/playground/holidayrequest/src/main/kotlin/org/flowable/main.kt" />
      <jump line="41" column="34" filename="/opt/playground/holidayrequest/src/main/kotlin/org/flowable/main.kt" />
      <jump line="206" column="0" filename="/opt/playground/kotlin-demo/src/main/kotlin/main.kt" />
      <jump line="279" column="0" filename="/opt/playground/kotlin-demo/src/main/kotlin/main.kt" />
      <jump line="357" column="0" filename="/opt/playground/kotlin-demo/src/main/kotlin/main.kt" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIHByaW50bG4oImxhdW5jaCBjb3JvdXRpbmVDb250ZXh0ID0gJGNvcm91dGluZUNvbnRleHQiKQogICAgICAgICAgICAgICAgcHJpbnRsbigiY29yb3V0aW5lQ29udGV4dFtKb2JdID0gJHtjb3JvdXRpbmVDb250ZXh0W0pvYl19IikKICAgICAgICAgICAgICAgIHByaW50bG4oVGhyZWFkLmN1cnJlbnRUaHJlYWQoKS5uYW1lKQogICAgICAgICAgICAgICAgcHJpbnRsbigiLS0tLS0iKQo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIHByaW50bG4oIi0tLS0tIikK</text>
      </register>
      <register name="&quot;" type="4">
        <text>launch</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIHZhcmlhYmxlc1siYXBwcm92ZWQiXSA9IGFwcHJvdmVkCg==</text>
      </register>
      <register name="-" type="4">
        <text>launch</text>
      </register>
      <register name="/" type="4">
        <text>variables</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search>variables</last-search>
      <last-offset />
      <last-pattern>variables</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="false" />
    <notifications>
      <idea-join enabled="false" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>